import asyncio
import logging
import random
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import create_engine, Column, Integer, String, Float, DateTime, Boolean
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_engine('sqlite:///bakery.db')
Base = declarative_base()
Session = sessionmaker(bind=engine)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_navigation_history = {}

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class Product(Base):
    __tablename__ = 'products'
    id = Column(Integer, primary_key=True)
    name = Column(String)
    description = Column(String)
    price = Column(Float)
    category = Column(String)
    image_url = Column(String)
    is_special = Column(Integer, default=0)
    discount = Column(Float, default=0.0)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Å–∫–∏–¥–∫–∏


class Order(Base):
    __tablename__ = 'orders'
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer)
    product_id = Column(Integer)
    quantity = Column(Integer)
    created_at = Column(DateTime, default=datetime.now)
    status = Column(String, default='pending')


class Admin(Base):
    __tablename__ = 'admins'
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, unique=True)
    username = Column(String)
    is_active = Column(Boolean, default=True)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
Base.metadata.create_all(engine)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard(user_id=None):
    session = Session()
    is_admin = False
    if user_id:
        admin = session.query(Admin).filter_by(user_id=user_id, is_active=True).first()
        is_admin = bool(admin)
    session.close()

    keyboard = [
        [KeyboardButton(text="üç∞ –ú–µ–Ω—é")],
        [KeyboardButton(text="üéÅ –ê–∫—Ü–∏–∏")],
        [KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")],
        [KeyboardButton(text="üöö –£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏")],
        [KeyboardButton(text="‚ÑπÔ∏è –û –Ω–∞—Å")],
        [KeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")]
        
    ]

    if is_admin:
        keyboard.extend([
            [KeyboardButton(text="üìã –ó–∞–∫–∞–∑—ã")],
            [KeyboardButton(text="üß∫ –ö–æ—Ä–∑–∏–Ω—ã")]
        ])

    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_category_keyboard():
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="üç™ –°–ª–∞–¥–∫–∏–µ –ø–∏—Ä–æ–≥–∏", callback_data="category_sweet"))
    keyboard.add(InlineKeyboardButton(text="ü•ß –°—ã—Ç–Ω—ã–µ –ø–∏—Ä–æ–≥–∏", callback_data="category_savory"))
    return keyboard.adjust(2).as_markup()

def get_products_keyboard(category):
    session = Session()
    products = session.query(Product).filter_by(category=category).all()
    keyboard = InlineKeyboardBuilder()
    
    for product in products:
        # –£—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã
        display_price = product.price * (1 - product.discount) if product.discount > 0 else product.price
        price_text = f"{display_price:.2f} —Ä—É–±."
        if product.discount > 0:
            price_text += f" (-{int(product.discount * 100)}%)"
        
        keyboard.add(InlineKeyboardButton(
            text=f"{product.name} - {price_text}",
            callback_data=f"product_{product.id}"
        ))
    
    keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_categories"))
    session.close()
    return keyboard.adjust(1).as_markup()

def get_cart_keyboard():
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout"))
    keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    return keyboard.adjust(1).as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –ø–µ–∫–∞—Ä–Ω—é! ü•ñ\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_main_keyboard(message.from_user.id)
    )

@dp.message(lambda message: message.text == "üç∞ –ú–µ–Ω—é")
async def show_menu(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–∏—Ä–æ–≥–æ–≤:",
        reply_markup=get_category_keyboard()
    )

@dp.message(lambda message: message.text == "üéÅ –ê–∫—Ü–∏–∏")
async def show_specials(message: types.Message):
    session = Session()
    special_product = session.query(Product).filter_by(is_special=1).first()
    if special_product:
        await message.answer(
            f"üéâ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!\n\n"
            f"{special_product.name}\n"
            f"{special_product.description}\n"
            f"–¶–µ–Ω–∞: {special_product.price * 0.8:.2f} —Ä—É–±. (—Å–∫–∏–¥–∫–∞ 20%)"
        )
    else:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ—Ç.")
    session.close()

@dp.message(lambda message: message.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: types.Message):
    session = Session()
    orders = session.query(Order).filter_by(user_id=message.from_user.id, status='pending').all()
    
    if not orders:
        await message.answer("–í –∫–æ—Ä–∑–∏–Ω–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç")
        return
    
    total = 0
    cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    
    for order in orders:
        product = session.query(Product).get(order.product_id)
        # –£—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ü–µ–Ω—ã
        price = product.price * (1 - product.discount) if product.discount > 0 else product.price
        cart_text += f"{product.name} - {order.quantity} —à—Ç. x {price:.2f} —Ä—É–±."
        if product.discount > 0:
            cart_text += f" (-{int(product.discount * 100)}%)"
        cart_text += "\n"
        total += price * order.quantity
    
    cart_text += f"\nüí∞ –ò—Ç–æ–≥–æ: {total:.2f} —Ä—É–±."
    
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout"))
    keyboard.add(InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart"))
    keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_categories"))
    
    await message.answer(cart_text, reply_markup=keyboard.adjust(1).as_markup())
    session.close()

@dp.message(lambda message: message.text == "üöö –£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏")
async def show_delivery_info(message: types.Message):
    await message.answer(
        "–í–∞–º –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –º–µ–Ω—é, –∏ –º—ã –¥–æ—Å—Ç–∞–≤–∏–º –≤–∞–º –≤ –ª—é–±—É—é —Ç–æ—á–∫—É –≥–æ—Ä–æ–¥–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ –≤–∞—à –∑–∞–∫–∞–∑."
    )

@dp.message(lambda message: message.text == "‚ÑπÔ∏è –û –Ω–∞—Å")
async def show_about(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –ø–µ–∫–∞—Ä–Ω—é! ü•ñ\n\n"
        "–ú—ã - —Å–µ–º–µ–π–Ω–∞—è –ø–µ–∫–∞—Ä–Ω—è —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π, –≥–¥–µ –∫–∞–∂–¥—ã–π –ø–∏—Ä–æ–≥ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å –ª—é–±–æ–≤—å—é –∏ –∑–∞–±–æ—Ç–æ–π. "
        "–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã. "
        "–ù–∞—à–∞ –º–∏—Å—Å–∏—è - —Ä–∞–¥–æ–≤–∞—Ç—å –≤–∞—Å –≤–∫—É—Å–Ω–æ–π –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≤—ã–ø–µ—á–∫–æ–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query(lambda c: c.data.startswith('category_'))
async def process_category(callback: types.CallbackQuery):
    category = callback.data.split('_')[1]
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ä–æ–≥:",
        reply_markup=get_products_keyboard(category)
    )

@dp.callback_query(lambda c: c.data.startswith('product_'))
async def process_product(callback: types.CallbackQuery):
    product_id = int(callback.data.split('_')[1])
    session = Session()
    product = session.query(Product).get(product_id)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_{product_id}"))
    keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"back_to_products_{product.category}"))
    
    # –£—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã
    display_price = product.price * (1 - product.discount) if product.discount > 0 else product.price
    price_text = f"{display_price:.2f} —Ä—É–±."
    if product.discount > 0:
        price_text += f" (-{int(product.discount * 100)}%)"
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
        await callback.message.answer_photo(
            photo=product.image_url,
            caption=f"ü•ß {product.name}\n\n"
                   f"üìù {product.description}\n\n"
                   f"üí∞ –¶–µ–Ω–∞: {price_text}",
            reply_markup=keyboard.adjust(1).as_markup()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await callback.message.edit_text(
            f"ü•ß {product.name}\n\n"
            f"üìù {product.description}\n\n"
            f"üí∞ –¶–µ–Ω–∞: {price_text}",
            reply_markup=keyboard.adjust(1).as_markup()
        )
    
    session.close()

@dp.callback_query(lambda c: c.data == 'checkout')
async def process_checkout(callback: types.CallbackQuery):
    session = Session()
    orders = session.query(Order).filter_by(user_id=callback.from_user.id, status='pending').all()
    
    if not orders:
        await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    order_text = "üìã –í–∞—à –∑–∞–∫–∞–∑:\n\n"
    total = 0
    
    for order in orders:
        product = session.query(Product).get(order.product_id)
        price = product.price * (1 - product.discount) if product.discount > 0 else product.price
        order_text += f"‚Ä¢ {product.name} - {order.quantity} —à—Ç. x {price:.2f} —Ä—É–±."
        if product.discount > 0:
            order_text += f" (-{int(product.discount * 100)}%)"
        order_text += "\n"
        total += price * order.quantity
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        order.status = 'completed'
    
    order_text += f"\nüí∞ –ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total:.2f} —Ä—É–±."
    
    # –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + 5 —Å–µ–∫—É–Ω–¥)
    delivery_time = datetime.now() + timedelta(seconds=5)
    order_text += f"\n\nüöö –í–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ {delivery_time.strftime('%H:%M:%S')}"
    
    session.commit()
    session.close()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    await callback.message.delete()
    await callback.message.answer(
        f"‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n{order_text}"
    )
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    await asyncio.sleep(5)
    await callback.message.answer("üéâ –í–∞—à –∑–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!")

@dp.callback_query(lambda c: c.data == 'back_to_categories')
async def back_to_categories(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–∏—Ä–æ–≥–æ–≤:",
        reply_markup=get_category_keyboard()
    )

@dp.callback_query(lambda c: c.data.startswith('back_to_products_'))
async def back_to_products(callback: types.CallbackQuery):
    category = callback.data.split('_')[-1]
    session = Session()
    products = session.query(Product).filter_by(category=category).all()
    
    keyboard = InlineKeyboardBuilder()
    for product in products:
        display_price = product.price * (1 - product.discount) if product.discount > 0 else product.price
        price_text = f"{display_price:.2f} —Ä—É–±."
        if product.discount > 0:
            price_text += f" (-{int(product.discount * 100)}%)"
        
        keyboard.add(InlineKeyboardButton(
            text=f"{product.name} - {price_text}",
            callback_data=f"product_{product.id}"
        ))
    
    keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories"))
    
    await callback.message.delete()
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ä–æ–≥:",
        reply_markup=keyboard.adjust(1).as_markup()
    )
    session.close()

# –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(lambda message: message.text == "üìã –ó–∞–∫–∞–∑—ã")
async def show_orders(message: types.Message):
    session = Session()
    admin = session.query(Admin).filter_by(user_id=message.from_user.id, is_active=True).first()
    
    if not admin:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    orders = session.query(Order).filter_by(status='completed').all()
    
    if not orders:
        await message.answer("–ù–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
        return
    
    orders_text = "–°–ø–∏—Å–æ–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:\n\n"
    for order in orders:
        product = session.query(Product).get(order.product_id)
        orders_text += (
            f"–ó–∞–∫–∞–∑ #{order.id}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order.user_id}\n"
            f"–¢–æ–≤–∞—Ä: {product.name}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order.quantity}\n"
            f"–î–∞—Ç–∞: {order.created_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"–°—Ç–∞—Ç—É—Å: {order.status}\n\n"
        )
    
    await message.answer(orders_text)
    session.close()

@dp.message(lambda message: message.text == "üß∫ –ö–æ—Ä–∑–∏–Ω—ã")
async def show_carts(message: types.Message):
    session = Session()
    admin = session.query(Admin).filter_by(user_id=message.from_user.id, is_active=True).first()
    
    if not admin:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã (–∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending)
    carts = session.query(Order).filter_by(status='pending').all()
    
    if not carts:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω")
        return
    
    carts_text = "–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω:\n\n"
    for cart in carts:
        product = session.query(Product).get(cart.product_id)
        carts_text += (
            f"–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {cart.user_id}\n"
            f"–¢–æ–≤–∞—Ä: {product.name}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {cart.quantity}\n"
            f"–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {cart.created_at.strftime('%Y-%m-%d %H:%M:%S')}\n\n"
        )
    
    await message.answer(carts_text)
    session.close()

@dp.callback_query(lambda c: c.data == 'clear_cart')
async def clear_cart(callback: types.CallbackQuery):
    session = Session()
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    session.query(Order).filter_by(
        user_id=callback.from_user.id,
        status='pending'
    ).delete()
    
    session.commit()
    session.close()
    
    await callback.message.delete()
    await callback.message.answer(
        "üóë –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!",
        reply_markup=get_category_keyboard()
    )
    await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!")

@dp.callback_query(lambda c: c.data.startswith('add_'))
async def add_to_cart(callback: types.CallbackQuery):
    product_id = int(callback.data.split('_')[1])
    session = Session()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
    product = session.query(Product).get(product_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
    existing_order = session.query(Order).filter_by(
        user_id=callback.from_user.id,
        product_id=product_id,
        status='pending'
    ).first()
    
    if existing_order:
        existing_order.quantity += 1
    else:
        new_order = Order(
            user_id=callback.from_user.id,
            product_id=product_id,
            quantity=1,
            status='pending'
        )
        session.add(new_order)
    
    session.commit()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    orders = session.query(Order).filter_by(
        user_id=callback.from_user.id,
        status='pending'
    ).all()
    
    total = 0
    cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    
    for order in orders:
        product = session.query(Product).get(order.product_id)
        # –£—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ü–µ–Ω—ã
        price = product.price * (1 - product.discount) if product.discount > 0 else product.price
        cart_text += f"‚Ä¢ {product.name} - {order.quantity} —à—Ç. x {price:.2f} —Ä—É–±."
        if product.discount > 0:
            cart_text += f" (-{int(product.discount * 100)}%)"
        cart_text += "\n"
        total += price * order.quantity
    
    cart_text += f"\nüí∞ –ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total:.2f} —Ä—É–±."
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout"))
    keyboard.add(InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart"))
    keyboard.add(InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∫—É–ø–∫–∞–º", callback_data=f"back_to_products_{product.category}"))
    
    await callback.message.delete()
    await callback.message.answer(
        cart_text,
        reply_markup=keyboard.adjust(1).as_markup()
    )
    
    session.close()
    await callback.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

async def update_special_offers():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∞–∫—Ü–∏–∏ –∫–∞–∂–¥—ã–π —á–∞—Å"""
    while True:
        try:
            session = Session()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –∞–∫—Ü–∏–∏
            session.query(Product).update({Product.is_special: 0, Product.discount: 0.0})
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –∞–∫—Ü–∏–∏
            all_products = session.query(Product).all()
            if all_products:
                special_product = random.choice(all_products)
                special_product.is_special = 1
                special_product.discount = 0.2  # 20% —Å–∫–∏–¥–∫–∞
            
            session.commit()
            session.close()
            
            # –ñ–¥–µ–º 1 —á–∞—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            await asyncio.sleep(3600)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫—Ü–∏–π: {e}")
            await asyncio.sleep(60)  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∂–¥–µ–º 1 –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π


user_feedback_mode = {}

@dp.message(lambda message: message.text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
async def leave_feedback(message: types.Message):
    user_feedback_mode[message.from_user.id] = True
    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")

@dp.message(lambda message: message.text and user_feedback_mode.get(message.from_user.id))
async def handle_feedback(message: types.Message):
    user_feedback_mode[message.from_user.id] = False
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ü–∏–π –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    asyncio.create_task(update_special_offers())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 